{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Project: Container64 \u00b6 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 Overview \u00b6 Container64 is project for building and sharing OCI compliant container images that can be used for testing infrastructure management tools. Container collection: Ansible Node \u00b6 Purpose: Ansible node testing Packages: SystemD, Sudo, Python3 Image OS Base Image almalinux-8-ansible-node almalinux docker.io/library/almalinux:8.5 centos-8-ansible-node centos docker.io/library/centos:8 debian-10-ansible-node debian docker.io/library/debian:buster debian-11-ansible-node debian docker.io/library/debian:bullseye fedora-33-ansible-node fedora docker.io/library/fedora:33 fedora-35-ansible-node fedora docker.io/library/fedora:35 oraclelinux-8-ansible-node oraclelinux docker.io/library/oraclelinux:8 rhel-8-ansible-node rhel docker.io/redhat/ubi8:8.5 ubuntu-20.4-ansible-node ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-ansible-node ubuntu docker.io/library/ubuntu:21.04 Container collection: Bash Test \u00b6 Purpose: Bash scripts testing Packages: Bash, Bats Core, Bash Core plugins Image OS Base Image almalinux-8-bash-test almalinux docker.io/library/almalinux:8.5 alpine-3-bash-test alpine docker.io/library/alpine:3 centos-7-bash-test centos quay.io/centos/centos:centos7 centos-8-bash-test centos quay.io/centos/centos:8 centos-9-bash-test centos quay.io/centos/centos:stream9 debian-9-bash-test debian docker.io/library/debian:stretch debian-10-bash-test debian docker.io/library/debian:buster debian-11-bash-test debian docker.io/library/debian:bullseye fedora-33-bash-test fedora docker.io/library/fedora:33 fedora-34-bash-test fedora docker.io/library/fedora:34 fedora-35-bash-test fedora docker.io/library/fedora:35 oraclelinux-7-bash-test oraclelinux docker.io/library/oraclelinux:7 oraclelinux-8-bash-test oraclelinux docker.io/library/oraclelinux:8 rhel-8-bash-test rhel docker.io/redhat/ubi8:8.5 ubuntu-20.4-bash-test ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-bash-test ubuntu docker.io/library/ubuntu:21.04 Container collection: Terraform test \u00b6 Purpose: Terraform code testing Packages: TFSec Image OS Base Image oraclelinux-8-terraform-test oraclelinux docker.io/library/oraclelinux:8 Usage \u00b6 Run a command inside the container: 1 2 3 4 # Using docker: docker run ghcr.io/serdigital64/<IMAGE> <COMMAND> # Using podman: podman run ghcr.io/serdigital64/<IMAGE> <COMMAND> Deployment \u00b6 Requirements \u00b6 Container engine docker or podman Bash Installation \u00b6 Download the target image to the local registry: 1 2 3 4 # Using docker: docker pull ghcr.io/serdigital64/<IMAGE> # Using podman: podman pull ghcr.io/serdigital64/<IMAGE> ` Contributing \u00b6 Help on implementing new features and maintaining the code base is welcomed. Guidelines Contributor Covenant Code of Conduct License \u00b6 GPL-3.0-or-later Author \u00b6 SerDigital64","title":"Home"},{"location":"#project-container64","text":"\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2591\u2591\u2591 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2591\u2591 \u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2591\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2588 \u2591\u2591\u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2588\u2588\u2588 \u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591\u2591\u2591 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588 \u2591\u2588\u2588\u2588\u2591 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588\u2588\u2588\u2588 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591\u2591\u2591\u2591 \u2591\u2591\u2591\u2591\u2591","title":"Project: Container64"},{"location":"#overview","text":"Container64 is project for building and sharing OCI compliant container images that can be used for testing infrastructure management tools.","title":"Overview"},{"location":"#container-collection-ansible-node","text":"Purpose: Ansible node testing Packages: SystemD, Sudo, Python3 Image OS Base Image almalinux-8-ansible-node almalinux docker.io/library/almalinux:8.5 centos-8-ansible-node centos docker.io/library/centos:8 debian-10-ansible-node debian docker.io/library/debian:buster debian-11-ansible-node debian docker.io/library/debian:bullseye fedora-33-ansible-node fedora docker.io/library/fedora:33 fedora-35-ansible-node fedora docker.io/library/fedora:35 oraclelinux-8-ansible-node oraclelinux docker.io/library/oraclelinux:8 rhel-8-ansible-node rhel docker.io/redhat/ubi8:8.5 ubuntu-20.4-ansible-node ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-ansible-node ubuntu docker.io/library/ubuntu:21.04","title":"Container collection: Ansible Node"},{"location":"#container-collection-bash-test","text":"Purpose: Bash scripts testing Packages: Bash, Bats Core, Bash Core plugins Image OS Base Image almalinux-8-bash-test almalinux docker.io/library/almalinux:8.5 alpine-3-bash-test alpine docker.io/library/alpine:3 centos-7-bash-test centos quay.io/centos/centos:centos7 centos-8-bash-test centos quay.io/centos/centos:8 centos-9-bash-test centos quay.io/centos/centos:stream9 debian-9-bash-test debian docker.io/library/debian:stretch debian-10-bash-test debian docker.io/library/debian:buster debian-11-bash-test debian docker.io/library/debian:bullseye fedora-33-bash-test fedora docker.io/library/fedora:33 fedora-34-bash-test fedora docker.io/library/fedora:34 fedora-35-bash-test fedora docker.io/library/fedora:35 oraclelinux-7-bash-test oraclelinux docker.io/library/oraclelinux:7 oraclelinux-8-bash-test oraclelinux docker.io/library/oraclelinux:8 rhel-8-bash-test rhel docker.io/redhat/ubi8:8.5 ubuntu-20.4-bash-test ubuntu docker.io/library/ubuntu:20.04 ubuntu-21.4-bash-test ubuntu docker.io/library/ubuntu:21.04","title":"Container collection: Bash Test"},{"location":"#container-collection-terraform-test","text":"Purpose: Terraform code testing Packages: TFSec Image OS Base Image oraclelinux-8-terraform-test oraclelinux docker.io/library/oraclelinux:8","title":"Container collection: Terraform test"},{"location":"#usage","text":"Run a command inside the container: 1 2 3 4 # Using docker: docker run ghcr.io/serdigital64/<IMAGE> <COMMAND> # Using podman: podman run ghcr.io/serdigital64/<IMAGE> <COMMAND>","title":"Usage"},{"location":"#deployment","text":"","title":"Deployment"},{"location":"#requirements","text":"Container engine docker or podman Bash","title":"Requirements"},{"location":"#installation","text":"Download the target image to the local registry: 1 2 3 4 # Using docker: docker pull ghcr.io/serdigital64/<IMAGE> # Using podman: podman pull ghcr.io/serdigital64/<IMAGE> `","title":"Installation"},{"location":"#contributing","text":"Help on implementing new features and maintaining the code base is welcomed. Guidelines Contributor Covenant Code of Conduct","title":"Contributing"},{"location":"#license","text":"GPL-3.0-or-later","title":"License"},{"location":"#author","text":"SerDigital64","title":"Author"},{"location":"sources/","text":"Images \u00b6 almalinux-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/almalinux : 8.5 # Image Metadata LABEL \\ container64.os-name = \"almalinux\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] almalinux-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/almalinux : 8.5 # Image Metadata LABEL \\ container64.os-name = \"almalinux\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] alpine-3-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 # Base image FROM docker.io /library/alpine : 3 # Image Metadata LABEL \\ container64.os-name = \"alpine\" \\ container64.os-version = \"3\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Add Bash RUN \\ apk add bash # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git mawk gawk curl python3 py3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /cmd bl 64 _iam_user_add $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] centos-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # Base image FROM quay.io /centos/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ dnf --assumeyes --disablerepo '*' --enablerepo extras swap centos-linux-repos centos-stream-repos && \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] centos-7-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM quay.io /centos/centos : centos 7 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"7.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] centos-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 # Base image FROM quay.io /centos/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ dnf --assumeyes --disablerepo '*' --enablerepo extras swap centos-linux-repos centos-stream-repos && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] centos-9-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM quay.io /centos/centos : stream 9 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"9.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] debian-10-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-sysv\" ARG CNT64_SUDO_PREREQS = \"lsb-base\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"bzip2 file mime-support readline-common xz-utils\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.7 python3.7-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] debian-9-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : stretch # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"9.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] debian-10-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] debian-11-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] debian-11-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] fedora-33-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"\" ARG CNT64_PYTHON3_PREREQS = \"\" ARG CNT64_PYTHON3_PACKAGES = \"\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] fedora-35-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/fedora : 35 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"35.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"\" ARG CNT64_PYTHON3_PREREQS = \"\" ARG CNT64_PYTHON3_PACKAGES = \"\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] fedora-33-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] fedora-34-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 34 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"34.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] fedora-35-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 35 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"35.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] oraclelinux-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] oraclelinux-8-terraform-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"tfsec\" \\ org.opencontainers.image.description = \"Purpose: Terraform scripts testing - Packages: TFSec\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_TEST_USER = \"test\" ARG CNT64_SRC_TFSCAN = \"https://github.com/aquasecurity/tfsec/releases/download/v1.19.0/tfsec-linux-amd64\" ARG CNT64_BIN_TFSCAN = \"/usr/local/bin/tfscan\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _iam_user_add $ { CNT 64 _TEST_USER } && \\ /cmd bl 64 _rxtx_web_get_file $ { CNT 64 _SRC_TFSCAN } $ { CNT 64 _BIN_TFSCAN } ' 0 ' ' 0755 ' # Cleanup RUN /cmd bl 64 _fs_cleanup_full && rm /cmd USER $ { CNT 64 _TEST_USER } oraclelinux-7-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/oraclelinux : 7 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"7.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git tar hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] oraclelinux-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git tar hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] rhel-8-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /redhat/ubi 8 : 8.5 # Image Metadata LABEL \\ container64.os-name = \"rhel\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] rhel-8-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /redhat/ubi 8 : 8.5 # Image Metadata LABEL \\ container64.os-name = \"rhel\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.4.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git hostname diffutils wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] ubuntu-20.4-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"file mime-support readline-common xz-utils\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] ubuntu-20.4-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.7.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ] ubuntu-21.4-ansible-node \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common tzdata\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal python3-dbus python3-gi\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ] ubuntu-21.4-bash-test \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"Sources"},{"location":"sources/#images","text":"","title":"Images"},{"location":"sources/#almalinux-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/almalinux : 8.5 # Image Metadata LABEL \\ container64.os-name = \"almalinux\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"almalinux-8-ansible-node"},{"location":"sources/#almalinux-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/almalinux : 8.5 # Image Metadata LABEL \\ container64.os-name = \"almalinux\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"almalinux-8-bash-test"},{"location":"sources/#alpine-3-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 # Base image FROM docker.io /library/alpine : 3 # Image Metadata LABEL \\ container64.os-name = \"alpine\" \\ container64.os-version = \"3\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Add Bash RUN \\ apk add bash # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git mawk gawk curl python3 py3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /cmd bl 64 _iam_user_add $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"alpine-3-bash-test"},{"location":"sources/#centos-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 # Base image FROM quay.io /centos/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ dnf --assumeyes --disablerepo '*' --enablerepo extras swap centos-linux-repos centos-stream-repos && \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"centos-8-ansible-node"},{"location":"sources/#centos-7-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM quay.io /centos/centos : centos 7 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"7.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"centos-7-bash-test"},{"location":"sources/#centos-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 # Base image FROM quay.io /centos/centos : 8 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.3.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ dnf --assumeyes --disablerepo '*' --enablerepo extras swap centos-linux-repos centos-stream-repos && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"centos-8-bash-test"},{"location":"sources/#centos-9-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM quay.io /centos/centos : stream 9 # Image Metadata LABEL \\ container64.os-name = \"centos\" \\ container64.os-version = \"9.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"centos-9-bash-test"},{"location":"sources/#debian-10-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-sysv\" ARG CNT64_SUDO_PREREQS = \"lsb-base\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"bzip2 file mime-support readline-common xz-utils\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.7 python3.7-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"debian-10-ansible-node"},{"location":"sources/#debian-9-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : stretch # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"9.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"debian-9-bash-test"},{"location":"sources/#debian-10-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : buster # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"10.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"debian-10-bash-test"},{"location":"sources/#debian-11-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"debian-11-ansible-node"},{"location":"sources/#debian-11-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/debian : bullseye # Image Metadata LABEL \\ container64.os-name = \"debian\" \\ container64.os-version = \"11.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"debian-11-bash-test"},{"location":"sources/#fedora-33-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"\" ARG CNT64_PYTHON3_PREREQS = \"\" ARG CNT64_PYTHON3_PACKAGES = \"\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"fedora-33-ansible-node"},{"location":"sources/#fedora-35-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/fedora : 35 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"35.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"acl dbus device-mapper hwdata pciutils rdma-core xkeyboard-config diffutils kbd-legacy kbd-misc diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-pam systemd-rpm-macros systemd-networkd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"\" ARG CNT64_PYTHON3_PREREQS = \"\" ARG CNT64_PYTHON3_PACKAGES = \"\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"fedora-35-ansible-node"},{"location":"sources/#fedora-33-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 33 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"33.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"fedora-33-bash-test"},{"location":"sources/#fedora-34-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 34 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"34.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"fedora-34-bash-test"},{"location":"sources/#fedora-35-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/fedora : 35 # Image Metadata LABEL \\ container64.os-name = \"fedora\" \\ container64.os-version = \"35.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git diffutils hostname wget python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"fedora-35-bash-test"},{"location":"sources/#oraclelinux-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"oraclelinux-8-ansible-node"},{"location":"sources/#oraclelinux-8-terraform-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.1.0\" \\ container64.image-content = \"tfsec\" \\ org.opencontainers.image.description = \"Purpose: Terraform scripts testing - Packages: TFSec\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_TEST_USER = \"test\" ARG CNT64_SRC_TFSCAN = \"https://github.com/aquasecurity/tfsec/releases/download/v1.19.0/tfsec-linux-amd64\" ARG CNT64_BIN_TFSCAN = \"/usr/local/bin/tfscan\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _iam_user_add $ { CNT 64 _TEST_USER } && \\ /cmd bl 64 _rxtx_web_get_file $ { CNT 64 _SRC_TFSCAN } $ { CNT 64 _BIN_TFSCAN } ' 0 ' ' 0755 ' # Cleanup RUN /cmd bl 64 _fs_cleanup_full && rm /cmd USER $ { CNT 64 _TEST_USER }","title":"oraclelinux-8-terraform-test"},{"location":"sources/#oraclelinux-7-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/oraclelinux : 7 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"7.0\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git tar hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"oraclelinux-7-bash-test"},{"location":"sources/#oraclelinux-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/oraclelinux : 8 # Image Metadata LABEL \\ container64.os-name = \"oraclelinux\" \\ container64.os-version = \"8.0\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git tar hostname wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"oraclelinux-8-bash-test"},{"location":"sources/#rhel-8-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /redhat/ubi 8 : 8.5 # Image Metadata LABEL \\ container64.os-name = \"rhel\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"kbd-legacy kbd-misc xkeyboard-config diffutils kbd libxkbcommon\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-libs systemd-pam systemd-udev\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"platform-python-pip python3-pip python3-setuptools\" ARG CNT64_PYTHON3_PACKAGES = \"python36\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"rhel-8-ansible-node"},{"location":"sources/#rhel-8-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /redhat/ubi 8 : 8.5 # Image Metadata LABEL \\ container64.os-name = \"rhel\" \\ container64.os-version = \"8.5\" \\ container64.image-version = \"0.4.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git hostname diffutils wget python3 python3-pip python3-setuptools\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"rhel-8-bash-test"},{"location":"sources/#ubuntu-204-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info tzdata xdg-user-dirs\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"file mime-support readline-common xz-utils\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-dbus python3-gi python3-minimal python3.8 python3.8-minimal\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"ubuntu-20.4-ansible-node"},{"location":"sources/#ubuntu-204-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/ubuntu : 20.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"20.4\" \\ container64.image-version = \"0.7.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"ubuntu-20.4-bash-test"},{"location":"sources/#ubuntu-214-ansible-node","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.2.0\" \\ container64.image-content = \"systemd,sudo,python3\" # Prepare environment ENV container = \"docker\" COPY loader/ bashlib64.bash /cmd ARG BL64_LIB_CMD = \"1\" RUN /bin/chmod 0755 /cmd # Install packages ARG CNT64_SYSTEMD_PREREQS = \"dbus dmsetup gir1.2-glib-2.0 networkd-dispatcher shared-mime-info xdg-user-dirs\" ARG CNT64_SYSTEMD_PACKAGES = \"systemd systemd-timesyncd\" ARG CNT64_SUDO_PREREQS = \"\" ARG CNT64_SUDO_PACKAGES = \"sudo\" ARG CNT64_PYTHON3_PREREQS = \"ca-certificates media-types openssl readline-common tzdata\" ARG CNT64_PYTHON3_PACKAGES = \"python3 python3-minimal python3.9 python3.9-minimal python3-dbus python3-gi\" RUN \\ /cmd bl 64 _pkg_deploy \\ $ { CNT 64 _SYSTEMD_PREREQS } \\ $ { CNT 64 _SYSTEMD_PACKAGES } \\ $ { CNT 64 _SUDO_PREREQS } \\ $ { CNT 64 _SUDO_PACKAGES } \\ $ { CNT 64 _PYTHON 3 _PREREQS } \\ $ { CNT 64 _PYTHON 3 _PACKAGES } # Configure subsystem: systemd RUN systemctl set -default multi-user.target # Cleanup RUN \\ /cmd bl 64 _os_cleanup_full && \\ rm /cmd # Final command CMD [ \"/lib/systemd/systemd\" ]","title":"ubuntu-21.4-ansible-node"},{"location":"sources/#ubuntu-214-bash-test","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 # Base image FROM docker.io /library/ubuntu : 21.04 # Image Metadata LABEL \\ container64.os-name = \"ubuntu\" \\ container64.os-version = \"21.4\" \\ container64.image-version = \"0.5.0\" \\ container64.image-content = \"bash,bats-core\" \\ org.opencontainers.image.description = \"Purpose: Bash scripts testing - Packages: Bash, Bats Core, Bash Core plugins, OS utilities\" # Prepare package installer ENV container = \"docker\" # Download BashLib64 COPY loader/ bashlib64.bash /cmd # Prepare environment ARG BL64_LIB_CMD = \"1\" ARG CNT64_BATSCORE_USER = \"test\" ARG CNT64_BATSCORE_VOLUME = \"/test\" ARG CNT64_HELPERS = \"sudo git wget curl gawk python3 python3-pip\" RUN \\ /bin/chmod 755 /cmd && \\ /cmd bl 64 _pkg_deploy $ { CNT 64 _HELPERS } RUN \\ /usr/sbin/useradd -m $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _rbac_add_root $ { CNT 64 _BATSCORE_USER } && \\ /cmd bl 64 _fs_mkdir_full $ { CNT 64 _BATSCORE_VOLUME } # Install Bats-Core ARG CNT64_BATSCORE_REPO = \"https://github.com/bats-core\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-core\" ARG CNT64_BATSCORE_COMPONENT_PATH = \"/opt\" ARG CNT64_BATSCORE_HELPERS = \"${CNT64_BATSCORE_COMPONENT_PATH}/${CNT64_BATSCORE_COMPONENT_NAME}/test_helper\" RUN \\ /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' && \\ /cmd bl 64 _fs_mkdir_full $CNT 64 _BATSCORE_HELPERS # Install plugins ARG CNT64_BATSCORE_COMPONENT_PATH = \"$CNT64_BATSCORE_HELPERS\" ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-support\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-assert\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' ARG CNT64_BATSCORE_COMPONENT_NAME = \"bats-file\" RUN /cmd bl 64 _vcs_git_clone $ { CNT 64 _BATSCORE_REPO } /$ { CNT 64 _BATSCORE_COMPONENT_NAME }. git $ { CNT 64 _BATSCORE_COMPONENT_PATH } 'master' # Cleanup RUN \\ /cmd bl 64 _fs_cleanup_full && \\ rm /cmd # Run bats-core against /test CMD [ \"/test\" ] USER $ { CNT 64 _BATSCORE_USER } ENTRYPOINT [ \"/opt/bats-core/bin/bats\" ]","title":"ubuntu-21.4-bash-test"}]}